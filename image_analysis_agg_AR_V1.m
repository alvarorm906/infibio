
function image_analysis_agg_AR_V1(route, myFolder)

[X,~] = imread(route);
%segmentImage Segment image using auto-generated code from Image Segmenter app
%  [BW,MASKEDIMAGE] = segmentImage(X) segments image X using auto-generated
%  code from the Image Segmenter app. The final segmentation is returned in
%  BW, and a masked image is returned in MASKEDIMAGE.

% Auto-generated by imageSegmenter app on 23-Nov-2023
%----------------------------------------------------
% Convertir la imagen a escala de grises


% Convertir la imagen a binaria
imagenBinaria = imbinarize(X);

% Contar el número de píxeles blancos y negros
numPixelesBlancos = sum(imagenBinaria(:));
numPixelesNegros = numel(imagenBinaria) - numPixelesBlancos;

% Adjust data to span data range.

% Determinar el color que predomina como fondo
if numPixelesBlancos > numPixelesNegros
    BW = imbinarize(im2gray(X), 'adaptive', 'Sensitivity', 0.470000, 'ForegroundPolarity', 'bright');
    % Fill holes
    BW = imfill(BW, 'holes');
% Active contour
    iterations = 5;
    BW = activecontour(X, BW, iterations, 'Chan-Vese');
else
    BW = imbinarize(im2gray(X), 'adaptive', 'Sensitivity', 0.48, 'ForegroundPolarity', 'dark');
    % Invert mask
    BW = imcomplement(BW);
    % Fill holes
BW = imfill(BW, 'holes');
end


% Clear borders
BW = imclearborder(BW);

BW_out = bwpropfilt(BW,'Area',[1500 + eps(1500), Inf]);
propsbw = regionprops(BW_out, {'Area', 'Centroid', 'FilledArea', 'Perimeter', 'Circularity', 'Eccentricity'});

propsbw_cleaned = struct('Area', [], 'Centroid', [], 'FilledArea', [], 'Perimeter', [], 'Circularity', [], 'Eccentricity', []);





% Extract the base name of the original image without the file extension
[~, baseName, ~] = fileparts(route);

% Split the baseName into parts using underscores
nameParts = strsplit(baseName, '_');

% Extract dilution and time information
dilution = str2double(nameParts{end - 1});  % Assuming dilution is the second-to-last part
time = str2double(nameParts{end});  % Assuming time is the last part


% Use imwrite to save the binary image with the new name
% Save the modified image with area values
newImageName = strcat(baseName, '_area.tif');  % Choose an appropriate image format
% Save the binary image with areas labeled

imwrite(BW_out, fullfile(myFolder, newImageName));




% Add the rows with Area > 300 to properties_cleaned
for i = 1:length(propsbw)
    if propsbw(i).Area > 1500
        propsbw_cleaned(end+1) = propsbw(i);
    end
end

propsbw_cleaned(1) = [];




for i = 1:length(propsbw_cleaned)
    propsbw_cleaned(i).Concentration = [];
    propsbw_cleaned(i).Time = [];
end

for i = 1:length(propsbw_cleaned)
    

    propsbw_cleaned(i).Concentration = dilution;
    propsbw_cleaned(i).Time = time;
    
        
end


% Extract the base name of the original image without the file extension
[~, baseName, ~] = fileparts(route);

% Create the new name for the MAT file by appending "_results.mat"
FileName = fullfile(myFolder, [baseName, '_results.mat']);
FileName_csv = fullfile(myFolder, [baseName, '_results.csv']);
writetable(struct2table(propsbw_cleaned), FileName_csv,'delimiter',',');
% Write the structure to a MAT file using save
save(FileName, 'propsbw_cleaned');

end


